#include <stdio.h>

#define MAX_SIZE 100

struct Point
{
    int x, y;
};

struct Stack
{
    struct Point items[MAX_SIZE];
    int top;
};

void push(struct Stack *s, struct Point coordinate)
{
    s->items[++s->top]=coordinate;
}

struct Point pop(struct Stack *s)
{
    return s->items[s->top--];
}

int empty(struct Stack *s)
{
    return s->top==-1;
}

int valid(int x, int y, int size, int maze[size][size], int visited[MAX_SIZE][MAX_SIZE])
{
    return x<size && x>=0 && y<size&& y>=0  && maze[x][y]==0 && !visited[x][y];
}

int play(int size, int maze[size][size])
{
    int visited[MAX_SIZE][MAX_SIZE]={{0}};
    struct Stack stack;
    stack.top=-1;
    struct Point start={0,0}, end={size-1, size-1};
    push(&stack, start);
    int directions[4][2]={{-1,0},{0,-1},{0,1},{1,0}};
    while (!empty(&stack))
    {
        struct Point current=pop(&stack);
        if (current.x==end.x && current.y==end.y)
            return 1;
        visited[current.x][current.y]=1;
        for (int i=0; i<4; i++)
        {
            struct Point next;
            next.x=current.x+directions[i][0], next.y=current.y+directions[i][1];
            if (valid(next.x, next.y, size, maze, visited))
            {
                push(&stack, next);
            }
        }
    }
    return 0;
}

int main()
{
    int size;
    scanf("%d",&size);
    int maze[size][size];
    for (int i=0; i<size; i++)
        for (int j=0; j<size; j++)
            scanf("%d",&maze[i][j]);

    if (play(size,maze))
        printf("Yes\n");
    else
        printf("No\n");
}
